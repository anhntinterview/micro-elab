name: micro elab
on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  workflow_dispatch:
    inputs:
      version:
        description: "Image version"
        required: true
env:
  IMAGE_NAME: elab-image
  CONTAINER_NAME: elab-container
jobs:
  build_and_push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Docker Hub Repository
        uses: actions/checkout@v2
      
      # LOGIN AND PUSH IMAGE TO DOCKERHUB
      - name: Log in to DockerHub
        run: echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }}  --password-stdin
      - name: Build docker image
        run: docker build -t $(echo ${{ secrets.DOCKERHUB_USERNAME }})/$(echo $IMAGE_NAME):$(echo ${{ secrets.DOCKERHUB_TAG }} | head -c7) -f Dockerfile.app .
      - name: Push docker image to DockerHub
        run: docker push $(echo ${{ secrets.DOCKERHUB_USERNAME }})/$(echo $IMAGE_NAME):$(echo ${{ secrets.DOCKERHUB_TAG }} | head -c7)
  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push
    continue-on-error: true
    steps:
      - name: Deploy to Digital Ocean droplet from DockerHub
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSHKEY }}
          passphrase: ""
          envs: IMAGE_NAME,CONTAINER_NAME,{{ secrets.DOCKERHUB_USERNAME }},{{ secrets.DOCKERHUB_PASSWORD }}, ${{ secrets.DOCKERHUB_TAG }}
          script: |
            # Login to Docker Hub
            echo {{ secrets.DOCKERHUB_PASSWORD }} | docker login -u {{ secrets.DOCKERHUB_USERNAME }} --password-stdin
            # Stop running container
            docker stop ${{ env.CONTAINER_NAME }}
            # Remove old container & image
            docker rm ${{ env.CONTAINER_NAME }}
            docker rmi $(docker image ls -q)
            # Pull from DockerHub
            docker pull $(echo ${{ secrets.DOCKERHUB_USERNAME }})/$(echo $IMAGE_NAME):$(echo ${{ secrets.DOCKERHUB_TAG }} | head -c7)
            # Run a new container from a new image
            docker run --name ${{ env.CONTAINER_NAME }} -d -p 3000:3000 $(echo ${{ secrets.DOCKERHUB_USERNAME }})/$(echo $IMAGE_NAME):$(echo ${{ secrets.DOCKERHUB_TAG }} | head -c7)
            --restart always \
            --name $(echo $IMAGE_NAME) \
            $(echo ${{ secrets.DOCKERHUB_USERNAME }})/$(echo $IMAGE_NAME):$(echo ${{ secrets.DOCKERHUB_TAG }} | head -c7)